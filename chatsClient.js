import { getItem, setItem } from './dbStorage.js';
import { showToast } from './utils.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EmojiButton –ø—Ä—è–º–æ –∏–∑ CDN –∫–∞–∫ ES-–º–æ–¥—É–ª—å
// chatsClient.js
import { EmojiButton } from 'https://cdn.jsdelivr.net/npm/@joeattardi/emoji-button@4.6.4/dist/index.js';

const picker = new EmojiButton({
  position: 'top-start',
  theme: 'light'
});

/**
 * –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
 */
export async function renderChatList() {
  const chatsData = await getItem('adminChats');
  const allChats = chatsData ? JSON.parse(chatsData) : {};
  const chatListContainer = document.querySelector('.chat-list-container');
  let html = `<h2>–ß–∞—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>`;
  
  if (Object.keys(allChats).length === 0) {
    html += `<p>–ù–µ—Ç —á–∞—Ç–æ–≤.</p>`;
  } else {
    html += `<ul class="chat-list">`;
    for (const userEmail in allChats) {
      const chat = allChats[userEmail];
      const lastMsg = chat[chat.length - 1];
      const unreadCount = chat.filter(m => m.from === 'user' && !m.readByAdmin).length;
      html += `<li class="chat-item" data-email="${userEmail}">
                <div class="chat-item-header">
                  <span class="chat-user">${userEmail}</span>
                  ${unreadCount > 0 ? `<span class="chat-unread">${unreadCount}</span>` : ''}
                </div>
                <div class="chat-item-last">
                  ${lastMsg ? (lastMsg.text || '[—Ñ–∞–π–ª]') : ''}
                </div>
              </li>`;
    }
    html += `</ul>`;
  }
  chatListContainer.innerHTML = html;
  
  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
  const chatItems = chatListContainer.querySelectorAll('.chat-item');
  chatItems.forEach(item => {
    item.addEventListener('click', () => {
      const email = item.getAttribute('data-email');
      renderChatWindow(email);
    });
  });
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
 */
export async function renderChatWindow(userEmail) {
  const chatWindowContainer = document.querySelector('.chat-window-container');
  chatWindowContainer.style.display = 'block';
  
  // –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–º–µ—Ç–∫—É –æ–∫–Ω–∞ —á–∞—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π emoji-–ø–∏–∫–µ—Ä–∞
  const chatWindow = chatWindowContainer.querySelector('.chat-window');
  chatWindow.innerHTML = `
    <h3>–ß–∞—Ç —Å ${userEmail}</h3>
    <div id="chatHistory" class="chat-history"></div>
    <div class="chat-input-container">
      <input type="file" id="chatFileInput" style="display:none;">
      <button id="attachFileBtn" class="button button-sm">üìé</button>
      <button id="emojiPickerBtn" class="button button-sm">üòä</button>
      <input type="text" id="chatMessageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...">
      <button id="sendChatMessage" class="button button-sm">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </div>
  `;
  
  // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º emoji-–ø–∏–∫–µ—Ä –∫ –∫–Ω–æ–ø–∫–µ
  const emojiPickerBtn = chatWindow.querySelector('#emojiPickerBtn');
  const chatMessageInput = chatWindow.querySelector('#chatMessageInput');
  emojiPickerBtn.addEventListener('click', () => {
    picker.togglePicker(emojiPickerBtn);
  });
  picker.on('emoji', selection => {
    chatMessageInput.value += selection.emoji;
    chatMessageInput.focus();
  });
  
  await renderChatHistory(userEmail);
  
  const attachFileBtn = chatWindow.querySelector('#attachFileBtn');
  const chatFileInput = chatWindow.querySelector('#chatFileInput');
  const sendChatMessageBtn = chatWindow.querySelector('#sendChatMessage');
  
  attachFileBtn.addEventListener('click', () => {
    chatFileInput.click();
  });
  sendChatMessageBtn.addEventListener('click', () => {
    sendMessage(userEmail);
  });
  chatMessageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage(userEmail);
  });
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–∫–Ω–µ —á–∞—Ç–∞.
 */
async function renderChatHistory(userEmail) {
  const chatHistory = document.getElementById('chatHistory');
  const chatsData = await getItem('adminChats');
  let allChats = chatsData ? JSON.parse(chatsData) : {};
  let userChat = allChats[userEmail] || [];
  let html = '';
  userChat.forEach(msg => {
    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (msg.from === 'user') msg.readByAdmin = true;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–æ–±–ª–∞–∫–∞" —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º, —Ç–µ–Ω—è–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π
    if (msg.from === 'user') {
      html += `<div class="chat-message user-message">
                <div class="message-content">
                  ${msg.fileName ? `<a href="${msg.fileData}" download="${msg.fileName}">${msg.fileName}</a>` : msg.text}
                </div>
                <div class="chat-date">${msg.date}</div>
              </div>`;
    } else {
      html += `<div class="chat-message admin-message">
                <div class="message-content">
                  ${msg.fileName ? `<a href="${msg.fileData}" download="${msg.fileName}">${msg.fileName}</a>` : msg.text}
                </div>
                <div class="chat-date">${msg.date}</div>
              </div>`;
    }
  });
  chatHistory.innerHTML = html;
  chatHistory.scrollTop = chatHistory.scrollHeight;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
  await setItem('adminChats', JSON.stringify(allChats));
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑).
 */
async function sendMessage(userEmail) {
  const chatWindow = document.querySelector('.chat-window');
  const chatMessageInput = chatWindow.querySelector('#chatMessageInput');
  const chatFileInput = chatWindow.querySelector('#chatFileInput');
  const messageText = chatMessageInput.value.trim();
  const file = chatFileInput.files[0];
  if (!messageText && !file) {
    showToast('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'error');
    return;
  }
  if (file) {
    const reader = new FileReader();
    reader.onload = async (e) => {
      const dataURL = e.target.result;
      await addMessage(userEmail, {
        from: 'admin',
        text: '',
        fileName: file.name,
        fileData: dataURL,
        date: new Date().toLocaleString()
      });
      chatFileInput.value = '';
      chatMessageInput.value = '';
      await renderChatHistory(userEmail);
      triggerNotification(userEmail, '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º');
    };
    reader.readAsDataURL(file);
  } else {
    await addMessage(userEmail, {
      from: 'admin',
      text: messageText,
      fileName: '',
      fileData: '',
      date: new Date().toLocaleString()
    });
    chatMessageInput.value = '';
    await renderChatHistory(userEmail);
    triggerNotification(userEmail, '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + messageText);
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.
 */
async function addMessage(userEmail, message) {
  const chatsData = await getItem('adminChats');
  let allChats = chatsData ? JSON.parse(chatsData) : {};
  if (!allChats[userEmail]) {
    allChats[userEmail] = [];
  }
  allChats[userEmail].push(message);
  await setItem('adminChats', JSON.stringify(allChats));
  // –ï—Å–ª–∏ –æ–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤—ã–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if (document.hidden) {
    triggerNotification(userEmail, message.text || '[—Ñ–∞–π–ª]');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
 */
function triggerNotification(userEmail, messageText) {
  if (!("Notification" in window)) {
    console.log("–≠—Ç–æ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
    return;
  }
  if (Notification.permission === "granted") {
    new Notification("–ß–∞—Ç —Å " + userEmail, { body: messageText });
  } else if (Notification.permission !== "denied") {
    Notification.requestPermission().then(permission => {
      if (permission === "granted") {
        new Notification("–ß–∞—Ç —Å " + userEmail, { body: messageText });
      }
    });
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 */
export async function initChat() {
  await renderChatList();
}